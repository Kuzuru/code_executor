services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:3000
    depends_on:
      backend:
        condition: "service_started"
    user: "prod"
    networks:
      - frontend

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USR}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PWD}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - dbnet

  dbworker:
    build:
      context: ./dbworker
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    networks:
      - dbnet
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      dbworker:
        condition: "service_started"
    volumes:
      - ./backend:/agent
    command: bash -c "python3 /agent/launch.py"
    networks:
      - frontend
      - backend

volumes:
  mongo-data:

networks:
  dbnet:
  backend:
  frontend:
    driver: bridge